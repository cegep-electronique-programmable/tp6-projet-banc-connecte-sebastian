#include <Arduino.h>
#include <Wire.h>
#include <APDS9930.h>  
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>      

#define INPUT_PIN    D5      // Pin pour l’état du chargeur
#define SDA_PIN      D2      // Sur ESP8266 : SDA → D2
#define SCL_PIN      D1      // Sur ESP8266 : SCL → D1
#define PROX_THRESHOLD 350   // Seuil de proximité pour considérer que quelqu’un est détecté

#define SCREEN_WIDTH 128 // largeur en pixels
#define SCREEN_HEIGHT 64 // hauteur en pixels
#define OLED_RESET    -1 // pas de pin reset dédiée
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);


APDS9930 apds;               // Objet capteur APDS-9930

static const uint8_t image[1024] = {
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0x7f, 0xff, 0xff, 0xff, 0xf7, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0x3f, 0xff, 0xff, 0xff, 0xe7, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0x1f, 0xff, 0xff, 0xff, 0xc7, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0x0f, 0xff, 0xff, 0xff, 0x87, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0x07, 0xff, 0xff, 0xff, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0x03, 0xff, 0xff, 0xfe, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0x01, 0xff, 0xff, 0xfc, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0x00, 0xff, 0xff, 0xf8, 0x07, 0xff, 0x0f, 0xfa, 0xef, 0xff, 0xff, 0xef, 0xff, 0xff, 0xff, 0xff, 
	0x00, 0x7f, 0xff, 0xf0, 0x07, 0xfe, 0xf7, 0xfa, 0xff, 0xff, 0xff, 0xef, 0xff, 0xff, 0xff, 0xff, 
	0x00, 0x3f, 0xff, 0xe0, 0x07, 0xfe, 0xff, 0x3a, 0xc7, 0x0e, 0x7f, 0x0c, 0x7f, 0xff, 0xff, 0xff, 
	0x00, 0x1f, 0xff, 0xc0, 0x07, 0xff, 0xfe, 0xda, 0xba, 0xed, 0xbe, 0xcb, 0xbf, 0xff, 0xff, 0xff, 
	0x00, 0x0f, 0xff, 0x80, 0x07, 0xff, 0xfd, 0xea, 0xba, 0xeb, 0xbf, 0xeb, 0xbf, 0xff, 0xff, 0xff, 
	0x00, 0x07, 0xff, 0x00, 0x07, 0xfe, 0xfd, 0xea, 0xbe, 0xe9, 0xff, 0xeb, 0xff, 0xff, 0xff, 0xff, 
	0x00, 0x03, 0xfe, 0x00, 0x07, 0xfe, 0xf7, 0xda, 0xba, 0xed, 0xfe, 0xeb, 0xbf, 0xff, 0xff, 0xff, 
	0x00, 0x01, 0xfc, 0x00, 0x07, 0xff, 0x0e, 0x1a, 0xc7, 0x0c, 0x3e, 0x0c, 0x7f, 0xff, 0xff, 0xff, 
	0x00, 0x00, 0xf8, 0x00, 0x07, 0xff, 0xff, 0xff, 0xff, 0xef, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0x00, 0x00, 0x70, 0x00, 0x07, 0xff, 0xff, 0xff, 0xff, 0x4f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0x00, 0x00, 0x00, 0x00, 0x07, 0xfe, 0x7e, 0x7f, 0xcf, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0x00, 0x00, 0x00, 0x00, 0x07, 0xfe, 0x3c, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0x00, 0x00, 0x00, 0x00, 0x07, 0xfe, 0x3c, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0x00, 0x00, 0x00, 0x00, 0x07, 0xfe, 0x1c, 0x60, 0xcc, 0x18, 0x30, 0x30, 0x70, 0x6e, 0x4e, 0xc1, 
	0x00, 0x00, 0x00, 0x00, 0x07, 0xfe, 0x18, 0x66, 0xc9, 0x93, 0x33, 0x33, 0x26, 0x6e, 0x4c, 0x99, 
	0x00, 0x00, 0x00, 0x00, 0x07, 0xfe, 0x5a, 0x70, 0xcc, 0x73, 0x93, 0x33, 0x20, 0x6e, 0x64, 0x81, 
	0x00, 0x00, 0x00, 0x00, 0x07, 0xfe, 0x42, 0x64, 0xce, 0x13, 0x93, 0x37, 0x20, 0x6e, 0x61, 0x81, 
	0x00, 0x00, 0x00, 0x00, 0x07, 0xfe, 0x62, 0x64, 0xc9, 0x93, 0x33, 0x37, 0x27, 0x66, 0x71, 0x9d, 
	0x00, 0x00, 0x00, 0x00, 0x07, 0xfe, 0x66, 0x60, 0xcc, 0x18, 0x33, 0x37, 0x30, 0x60, 0x73, 0xc1, 
	0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
}; //Pour afficher l'image

int impulseCount = 0;       // Nombre de chargement detectees
int presenceCount = 0;      // Nombre de presence detectees
int etat;                   // Etat du chargeur -> LOW = en chargement
int i= 0;                   // Pour le chargement      
int j= 0;                   // Pour la presence
uint16_t proximity = 0;
float lux = 0.0;            // pour le niveau de luminosite


// put function declarations here:
void affichage(void);


void setup() {
  Serial.begin(9600);

  // Initialisation I2C sur les bonnes broches (ESP8266)
  Wire.begin(SDA_PIN, SCL_PIN);

  if (!display.begin(SSD1306_SWITCHCAPVCC, 0x3C)) { // adresse 0x3C par défaut
    Serial.println(F("Erreur init SSD1306"));
    for (;;); // freeze si échec
  }

  //Image de depart
  display.clearDisplay();
  display.drawBitmap(0, 0, image, 128, 37, 1);
  display.display();
  display.setTextSize(1);
  display.setTextColor(SSD1306_WHITE);
  display.setCursor(0, 48);
  display.println(F("Demarrage..."));
  display.display();

  delay(3000);

  // Initialise l’APDS-9930 et active les capteurs
  if (apds.init()) {
    Serial.println("APDS-9930 initialisé");  
    apds.enableProximitySensor(false); // désactive les interruptions matérielles 
    apds.enableLightSensor(false);     // pareille pour la lumière
  } else {
    Serial.println("Échec init APDS-9930");
  }

}

void loop() {

    delay(100);

  affichage();  //Affichage sur le LCD

  //Detection du chargeur sans fil
  etat = digitalRead(INPUT_PIN); 

  //Compteur pour le chargeur sans fil
  if(etat == LOW && i==0) {   
    if(i == 0){
      impulseCount++;
    }
    i = 1;
  }
  else if(etat == HIGH){    // Attends de revenir a un niveau bas pour "reactiver" le capteur
    i=0;
  }


  // Lecture de la proximité 
  if (apds.readProximity(proximity)) {
    //Serial.print("Capteur de proximite: ");
    //Serial.println(proximity);
    if (proximity > PROX_THRESHOLD && j == 0) {
      //Serial.println(">> Présence detectee !");
      presenceCount++;
      j= 1;
    } 
    //else if(proximity > PROX_THRESHOLD && j == 1){
      //Serial.println(">> Presence detectee !");
    //}
    else if(proximity < PROX_THRESHOLD){
      //Serial.println(">> Pas de presence");
      j = 0;
    }
  } 
  else {
    //Serial.println("Erreur lecture proximite");
  }
    apds.readAmbientLightLux(lux);  //Lecture de luminostie

    //if (apds.readAmbientLightLux(lux)) {
    //Serial.print("Ambient Light (lux): ");
    //Serial.println(lux);} 
    //else {
    //Serial.println("Erreur lecture luminosité");}

}



void affichage() {
  
  /*if (etat == HIGH) {
    Serial.println("Chargeur Deconnectee"); //Test avec le terminal
  } else {
    Serial.println("Chargeur Connectee");
  }
  Serial.print("Nombres de charges: ");
  Serial.println(impulseCount);
  Serial.print("Nombres de presences: ");
  Serial.println(presenceCount);*/

  //Affichage si on cellulaire est en chargement ou non
  display.clearDisplay();   //clear screen
  display.setCursor(0, 0);  
  if (etat == HIGH) {
    display.println("Chargeur Deconnectee");
  } else {
    display.println("Chargeur Connectee");
  }

  //Affichage du nombre de charge par cellulaire
  display.setCursor(0, 16);
  display.print("Charges Detectees: "); 
  display.print(impulseCount);
  
  //Affichage du niveau de luminosite
  display.setCursor(0, 32);
  display.print("Luminosite: ");
  display.print(lux);

  //Affichage du nombre de presence detectee et si une presence est la
  display.setCursor(0, 48);
  display.print("Presence Detectees: "); 
  display.print(presenceCount);
  if (proximity > PROX_THRESHOLD) {
    display.println("Presence detectee !");
  }
  else if(proximity < PROX_THRESHOLD){
    display.println("Presence non detectee");
    j = 0;
  }
  display.display();
}

